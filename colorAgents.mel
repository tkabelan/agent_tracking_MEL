global proc simulation_init_hubElementColorTST(string $node)
{
	string $names[];								string $values[];

	$names[size($names)] = "attributeSetup"; 	$values[size($values)] = "propJointOffsetAttributeSetup";
	$names[size($names)] = "initialize"; 	$values[size($values)] = "hubElementColorTSTInitializeMotion";
	$names[size($names)] = "groupInit";		$values[size($values)] = "hubElementColorTSTGroupInitialize";
	$names[size($names)] = "draw";			$values[size($values)] = "hubElementColorTST";
	
	msRegisterModule("hubElementColorTST", $names, $values);
	
	clear($names);									clear($values);
}

global proc simulation_user_event_hubElementColorTST(string $node,string $args[]) //event_drawAgentGroup
{
	float $col[] = `getAttr ($args[0] + ".colour")`;
	
	gglVisualiserEval("giggleVisualiser1Shape","drawMixed(\""+$args[0]+"\","+$col[0]+","+$col[1]+","+$col[2]+")",0);
}

global proc simulation_user_event_hubElementColorTSTInitializeMotion(string $node,string $args[]) //event_agentInitializeMotion
{
	int $pid = msGetAgentIdFromArgs($args);
	string $AGL = msGetAgentLocatorFromArgs($args);
	
	msCreateInitializedDataVector($pid, "agentColor", 0.75, 0.75, 0.75);
	setAttr -type "string" ($AGL+".colorDynamicData") "agentColor";
	
}

global proc simulation_user_event_hubElementColorTSTGroupInitialize(string $node,string $args[]) //event_agentGroupInitialize
{
	string $AGL = msGetAgentLocatorFromArgs($args);
	int $pids[] = motionSim("getAllMatchingIds", $AGL+"_*");
	
	string $characterType = `getAttr ($AGL+".characterType")`;
	string $config = "humanMaleConfig";
	vector $rgb = <<0.75, 0.75, 0.75>>;
	
	for($pid in $pids) {
		$config = `getAttr $AGL.hubElementNames[$pid]`;
		
		if(size(match($characterType, $config)) || size($characterType)==0 ) 
			{
		
			if(size(match("human", $config))) $rgb = <<1.000, 0.813, 0.665>>;
			else if(size(match("AvA", $config))) $rgb = <<1, 0, 0>>;
			else if(size(match("AvB", $config))) $rgb = <<0, 1, 0>>;
			else if(size(match("AvC", $config))) $rgb = <<0, 0, 1>>;
			else if(size(match("AvD", $config))) $rgb = <<1, 1, 0>>;
			else if(size(match("AvE", $config))) $rgb = <<0, 1, 1>>;
			else if(size(match("AvF", $config))) $rgb = <<1, 0, 1>>;
			else if(size(match("AvG", $config))) $rgb = <<0, 0.5, 1>>;
			else if(size(match("AvH", $config))) $rgb = <<1, 1, 1>>;
			else if(size(match("AvI", $config))) $rgb = <<0.1, 0.1, 0.1>>;
			else if(size(match("AvL", $config))) $rgb = <<0.35, 1, 1>>;		
			else if(size(match("AvM", $config))) $rgb = <<0, 0.35, 1>>;
			else if(size(match("AvN", $config))) $rgb = <<0186, 0.331, 0.5>>;
			else if(size(match("AvO", $config))) $rgb = <<0, 0.388, 0.078>>;		
			else if(size(match("AvP", $config))) $rgb = <<0.38, 0.276, 0.09>>;		
			else if(size(match("AvQ", $config))) $rgb = <<0.38, 0.176, 0.32>>;
			else if(size(match("AvK", $config))) $rgb = <<0.8, 1, 0.7>>;
			else if(size(match("AvJ", $config))) $rgb = <<0.6, 0.7, 0.320>>;	
			else if(size(match("AvR", $config))) $rgb = <<0.9, 0.7, 0.320>>;	

			else if(size(match("EvA", $config))) $rgb = <<1, 0, 0>>;
			else if(size(match("EvB", $config))) $rgb = <<0, 1, 0>>;
			else if(size(match("EvC", $config))) $rgb = <<0, 0, 1>>;
			else if(size(match("EvD", $config))) $rgb = <<1, 1, 0>>;
			else if(size(match("EvE", $config))) $rgb = <<0, 1, 1>>;
			else if(size(match("EvF", $config))) $rgb = <<1, 0, 1>>;
			else if(size(match("EvG", $config))) $rgb = <<0, 0.5, 1>>;
			else if(size(match("EvH", $config))) $rgb = <<1, 1, 1>>;
			else if(size(match("EvI", $config))) $rgb = <<0.1, 0.1, 0.1>>;
			else if(size(match("EvL", $config))) $rgb = <<0.35, 1, 1>>;		
			else if(size(match("EvM", $config))) $rgb = <<0, 0.35, 1>>;
			else if(size(match("EvN", $config))) $rgb = <<0186, 0.331, 0.5>>;
			else if(size(match("EvO", $config))) $rgb = <<0, 0.388, 0.078>>;		
			else if(size(match("EvP", $config))) $rgb = <<0.38, 0.276, 0.09>>;		
			else if(size(match("EvQ", $config))) $rgb = <<0.38, 0.176, 0.32>>;
			else if(size(match("EvK", $config))) $rgb = <<0.8, 1, 0.7>>;
			else if(size(match("EvJ", $config))) $rgb = <<0.6, 0.7, 0.320>>;	
			else if(size(match("EvR", $config))) $rgb = <<0.9, 0.7, 0.320>>;	
			}
			else 
			{
			 $rgb = <<0.75, 0.75, 0.75>>;

			}
		motionSim("setDynamicData", $pid, "agentColor", $rgb.r, $rgb.g, $rgb.b);	
	}
}

global proc propJointOffsetAttributeSetup(string $AGL)
{
	if(!`objExists($AGL+".characterType")`)	{
		addAttr -ln "characterType" -dt "string" $AGL;
		setAttr -type "string" -keyable true ($AGL+".characterType") "centaur";
	}
	
}

